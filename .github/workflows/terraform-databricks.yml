# This is a basic GitHub Actions pipeline to validate Terraform

name: "Databricks Terraform Infrastructure Pipeline"

on:
  workflow_call:
    inputs:
      DATABRICKS_ACCOUNT_ID:
        required: false
        type: string
      ARM_CLIENT_ID:
        required: true
        type: string
      ARM_SUBSCRIPTION_ID:
        required: true
        type: string
      ARM_TENANT_ID:
        required: true
        type: string
      BACKEND_RG_NAME:
        required: true
        type: string
      BACKEND_SA_NAME:
        required: true
        type: string
      BACKEND_CONTAINER_NAME:
        required: true
        type: string
      BACKEND_KEY:
        required: true
        type: string
      TERRAFORM_VERSION:
        required: true
        type: string
    secrets:
      ARM_CLIENT_SECRET:
        required: true

defaults:
  run:
    working-directory: terraform

env:
  DATABRICKS_ACCOUNT_ID: ${{ inputs.DATABRICKS_ACCOUNT_ID }}
  ARM_CLIENT_ID: ${{ inputs.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}
  BACKEND_RG_NAME: ${{ inputs.BACKEND_RG_NAME }}
  BACKEND_SA_NAME: ${{ inputs.BACKEND_SA_NAME }}
  BACKEND_CONTAINER_NAME: ${{ inputs.BACKEND_CONTAINER_NAME }}
  BACKEND_KEY: ${{ inputs.BACKEND_KEY }}
  TERRAFORM_VERSION: ${{ inputs.TERRAFORM_VERSION }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION

      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$BACKEND_SA_NAME" \
          -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
          -backend-config="key=$BACKEND_KEY"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file=prod/terraform.tfvars
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      max-parallel: 4

    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION

      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$BACKEND_SA_NAME" \
          -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
          -backend-config="key=$BACKEND_KEY"       

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file=prod/terraform.tfvars
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false --auto-approve -var-file=prod/terraform.tfvars
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
